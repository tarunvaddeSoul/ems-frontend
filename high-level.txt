- Dashboard
- Employees
  |- List Employees
  |- Add Employee
  |- Edit Employee
  |- Advanced Search  <-- New item
- Companies
  |- List Companies
  |- Add Company
  |- Edit Company
- Attendance
  |- Mark Attendance
  |- Upload Attendance Sheet
  |- View Attendance Records
- Reports
  |- Employee Reports
  |- Company Reports
  |- Attendance Reports



  ok i didnt like the idea you have proposed so i have come up with an idea of my own

so firstly, from the frontend part,

while creating the company, we will take the salary sheet template from the user only along with others like

In company details, name, address, contactPersonName, contactPersonNumber will be there

Along with that, there will be separate fields for salary sheet template that are required to later generate salary sheets of the company

The user will enable or disable the fields based on his requirement for later,

here are the fields we will let the user choose from,

1 - Name
2 - Father Name
3 - Company Name
4 - Designation
5 - Monthly rate
6 - Basic Duty
7 - Duty Done
8 - Wages per day
9 - Basic Pay
10 - EPF Wages
11 - Other Allowance
12 - Other Allowance Remark
13 - Bonus 8.33%
14 - Gross Salary

Deductions part:
15 - PF 12%
16 - ESIC 0.75%
17 - Advance
18 - Uniform
19 - Advance given by { Let the user specify name }
20 - Penalty
21 - LWF 10 rupees
22 - Other Deductions (Number)
23 - Other Deductions Remark (String)
24 - Total Deductions (mandatory field)


25 - Net salary (mandatory field)

Other fields:

26 - UAN Number
27 - PF Paid status
28 - ESIC Number
29 - ESIC Filing status


These are all the fields which should be selectable for the user

and all this data should go to backend 

and for that you can update Company table

model Company {
  id                   String   @id @default(uuid())
  name                 String
  address              String
  contactPersonName    String
  contactPersonNumber  String
  createdAt            DateTime @default(now())
  presentDaysCount     String
  PF                   String
  ESIC                 String
  BONUS                String
  LWF                  String
  otherAllowance       Int
  otherAllowanceRemark String?

  employees   Employee[]
  attendances Attendance[]
  Salary      Salary[]
  salaryTemplates SalaryTemplate[]
}

model SalaryTemplate {
  id        String @id @default(uuid())
  companyId String
  name      String
  fields    Json   // Store field definitions
  company   Company @relation(fields: [companyId], references: [id])
}

Later we can discuss how the implementation on the backend will be like

For now give me the frontend production level design with perfect UI/UX

For that you can update the existing Company page



i am creating a payroll management system service where i provide services like salary sheet generation, employee registrations and company onboarding

so im now working on company onboarding.

here is the flow,

the company should provide details like Company Name, Company Address, Contact Person name and number, and also the salary sheet template.

The salary sheet template will be unique for each employee..

and i should company with fields like 

1 - Name
2 - Father Name
3 - Company Name
4 - Designation
5 - Monthly rate
6 - Basic Duty
7 - Duty Done
8 - Wages per day
9 - Basic Pay
10 - EPF Wages
11 - Other Allowance
12 - Other Allowance Remark
13 - Bonus 8.33%
14 - Gross Salary

Deductions part:
15 - PF 12%
16 - ESIC 0.75%
17 - Advance
18 - Uniform
19 - Advance given by { Let the user specify name }
20 - Penalty
21 - LWF 10 rupees
22 - Other Deductions (Number)
23 - Other Deductions Remark (String)
24 - Total Deductions (mandatory field)


25 - Net salary (mandatory field)

Other fields:

26 - UAN Number
27 - PF Paid status
28 - ESIC Number
29 - ESIC Filing status


These are all the fields which should be selectable for the user


something like this 

const salaryTemplateFields: SalaryTemplateField[] = [
  { id: "name", label: "Employee Name", type: "text", required: true },
  { id: "fatherName", label: "Father Name", type: "text" },
  { id: "companyName", label: "Company Name", type: "text", required: true },
  { id: "designation", label: "Designation", type: "text", required: true },
  { id: "monthlyRate", label: "Monthly Rate", type: "number", required: true },
  {
    id: "basicDuty",
    label: "Basic Duty",
    type: "select",
    options: Object.values(BasicDuty),
    required: true,
  },
  { id: "dutyDone", label: "Duty Done", type: "number", required: true },
  { id: "wagesPerDay", label: "Wages per Day", type: "number" },
  { id: "basicPay", label: "Basic Pay", type: "number", required: true },
  { id: "epfWages", label: "EPF Wages", type: "number" },
  { id: "otherAllowance", label: "Other Allowance", type: "number" },
  { id: "otherAllowanceRemark", label: "Other Allowance Remark", type: "text" },
  { id: "bonus", label: "Bonus 8.33%", type: "number" },
  { id: "grossSalary", label: "Gross Salary", type: "number", required: true },
  { id: "pf", label: "PF 12%", type: "number", required: true },
  { id: "esic", label: "ESIC 0.75%", type: "number", required: true },
  { id: "advance", label: "Advance", type: "number" },
  { id: "uniform", label: "Uniform", type: "number" },
  { id: "advanceGivenBy", label: "Advance Given By", type: "text" },
  { id: "penalty", label: "Penalty", type: "number" },
  { id: "lwf", label: "LWF 10 rupees", type: "number" },
  { id: "otherDeductions", label: "Other Deductions", type: "number" },
  {
    id: "otherDeductionsRemark",
    label: "Other Deductions Remark",
    type: "text",
  },
  {
    id: "totalDeductions",
    label: "Total Deductions",
    type: "number",
    required: true,
  },
  { id: "netSalary", label: "Net Salary", type: "number", required: true },
  { id: "uanNumber", label: "UAN Number", type: "text" },
  { id: "pfPaidStatus", label: "PF Paid Status", type: "text" },
  { id: "esicNumber", label: "ESIC Number", type: "text" },
  { id: "esicFilingStatus", label: "ESIC Filing Status", type: "text" },
];

the required: true fields are by default auto selected.. but overall, we should allow user to choose from on of these

now what i want from you is to create a CompanyForm page with production level design with perfect user experience

i need everything production level


ok so now i do have individual apis to get the existing data of an employee with an id 

http://localhost:3003/employees/TSS2549/contact-details
{
  "statusCode": 200,
  "message": "Employee contact details fetched successfully",
  "data": {
    "id": "8b033d7a-3476-4442-8fcb-4221cff0a9fc",
    "employeeId": "TSS6339",
    "mobileNumber": "9876543210",
    "aadhaarNumber": "123456789012",
    "permanentAddress": "123 PARK STREET",
    "presentAddress": "456 HILL ROAD",
    "city": "NEW YORK",
    "district": "MANHATTAN",
    "state": "NEW YORK",
    "pincode": 10001,
    "createdAt": "2024-09-16T18:43:51.418Z",
    "updatedAt": "2024-09-16T18:43:51.418Z"
  }
}

http://localhost:3003/employees/TSS2549/bank-details
{
  "statusCode": 200,
  "message": "Employee bank details fetched successfully",
  "data": {
    "id": "7baa829c-adf1-41df-a5b9-7dc256012582",
    "employeeId": "TSS6339",
    "bankAccountNumber": "1234567890123456",
    "ifscCode": "ABCD0123456",
    "bankName": "BANK OF AMERICA",
    "bankCity": "NEW YORK",
    "createdAt": "2024-09-16T18:43:51.418Z",
    "updatedAt": "2024-09-16T18:43:51.418Z"
  }
}
http://localhost:3003/employees/TSS2549/additional-details
{
  "statusCode": 200,
  "message": "Employee additional details fetched successfully",
  "data": {
    "id": "d16e5a42-8b5d-4410-8b41-3a4dc328f602",
    "employeeId": "TSS6339",
    "pfUanNumber": "PFI567890",
    "esicNumber": "ESI567890",
    "policeVerificationNumber": "POL123456",
    "policeVerificationDate": "01-01-2021",
    "trainingCertificateNumber": "TRN123456",
    "trainingCertificateDate": "01-02-2021",
    "medicalCertificateNumber": "MED123456",
    "medicalCertificateDate": "01-03-2021",
    "createdAt": "2024-09-16T18:43:51.418Z",
    "updatedAt": "2024-09-16T18:43:51.418Z"
  }
}
http://localhost:3003/employees/TSS2549/reference-details
{
  "statusCode": 200,
  "message": "Employee reference details fetched successfully",
  "data": {
    "id": "fcd4f168-c2d3-485b-b45f-cb99bdb78afc",
    "employeeId": "TSS6339",
    "referenceName": "JANE DOE",
    "referenceAddress": "789 BEACH AVENUE",
    "referenceNumber": "9876543210",
    "createdAt": "2024-09-16T18:43:51.418Z",
    "updatedAt": "2024-09-16T18:43:51.418Z"
  }
}
http://localhost:3003/employees/TSS2549/document-uploads

{
  "statusCode": 200,
  "message": "Employee document uploads fetched successfully",
  "data": {
    "id": "9a227d10-4746-427e-9819-d37a906f0dc6",
    "employeeId": "TSS6339",
    "photo": "https://tss-ems-file-storage.s3.amazonaws.com/employees/TSS6339/photo",
    "aadhaar": "",
    "panCard": "",
    "bankPassbook": "",
    "markSheet": "",
    "otherDocument": "",
    "otherDocumentRemarks": "",
    "createdAt": "2024-09-16T18:43:51.418Z",
    "updatedAt": "2024-09-16T18:43:51.418Z"
  }
}

http://localhost:3003/employees/TSS2549/employment-history
{
  "statusCode": 200,
  "message": "Employment history fetched successfully",
  "data": [
    {
      "id": "c4fd55c7-18d2-4813-a255-12fc3ecae6b7",
      "employeeId": "TSS6339",
      "companyName": "GOOGLE",
      "designationName": "HR",
      "departmentName": "HR",
      "companyId": "21355371-df11-424c-90aa-6022a26a390d",
      "designationId": "2d6fe6ec-f351-4d02-82d5-a6b2a7f13098",
      "departmentId": "4e19c910-3dd7-41ac-8124-dcd84a4aab46",
      "salary": 120000,
      "joiningDate": "18-09-2024",
      "leavingDate": null,
      "status": "ACTIVE",
      "createdAt": "2024-09-17T07:28:49.080Z",
      "updatedAt": "2024-09-17T07:28:49.080Z"
    },
    {
      "id": "bf6ef076-4057-4b36-a2fd-429035a0ae6a",
      "employeeId": "TSS6339",
      "companyName": "GOOGLE",
      "designationName": "HR",
      "departmentName": "OFFICE",
      "companyId": "21355371-df11-424c-90aa-6022a26a390d",
      "designationId": "2d6fe6ec-f351-4d02-82d5-a6b2a7f13098",
      "departmentId": "4e19c910-3dd7-41ac-8124-dcd84a4aab46",
      "salary": 10000,
      "joiningDate": "01-07-2024",
      "leavingDate": "17-09-2024",
      "status": "INACTIVE",
      "createdAt": "2024-09-16T18:43:51.418Z",
      "updatedAt": "2024-09-17T07:27:28.574Z"
    }
  ]
}

these are all the apis with their responses and i want you to populate them accordingly

i want production-level typescript with latest mantine and perfect UI and UX